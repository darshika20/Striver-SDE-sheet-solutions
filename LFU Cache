/**
* author: Darshika
* Question Link: https://leetcode.com/problems/lfu-cache/
* Time Complexity: O(1)
* Space Complexity: O(n)
*/

class LFUCache {
    
    int minfreq;
    Map<Integer,DLList> freqNode;
    Map<Integer,DLLNode> nodeMap;
    int cap;
    
    public LFUCache(int capacity) {
        
        cap = capacity;
        freqNode = new HashMap<>();
        nodeMap = new HashMap<>();
        minfreq = 1;
        
    }
    
    public int get(int key) {
        
        if(nodeMap.containsKey(key)){
            
            DLLNode temp = nodeMap.get(key);
            updateNode(temp);
            return temp.value;
        }
        return -1;
        
    }
    
    public void put(int key, int value) {
        
        if(cap == 0) {
            return;
        }
        
        if(nodeMap.containsKey(key)) {
            
            DLLNode temp = nodeMap.get(key);
            temp.value = value;
            updateNode(temp);
            
        } else {
            
            if (nodeMap.size() == cap) {
                
                int k = freqNode.get(minfreq).removeLast();   
                nodeMap.remove(k);
            }
            DLLNode temp = new DLLNode(key,value,1);
            DLList list = freqNode.getOrDefault(1,new DLList(1));
            list.addNode(temp);
            freqNode.put(1,list);
            nodeMap.put(key,temp);
            
            minfreq = 1;
        }
        
    }
    
    public void updateNode(DLLNode temp){
        
        DLList tempList = freqNode.get(temp.freq);
        tempList.remove(temp);
        
        if(minfreq == tempList.head.freq && tempList.listsize == 0){
            minfreq++;
        }
        
        temp.freq++;
        DLList curList = freqNode.getOrDefault(temp.freq,new DLList(temp.freq));
        curList.addNode(temp);
        freqNode.put(temp.freq,curList);
        
    }
    
    class DLList {
        DLLNode head;
        DLLNode tail;
        int listsize;
        
        public DLList(int freq){
            head = new DLLNode(0,0,freq);
            tail = new DLLNode(0,0,freq);
            head.next = tail;
            tail.prev = head;
            listsize = 0;
        }
        
        public int removeLast() {
            int key = tail.prev.key;
            tail.prev = tail.prev.prev;
            tail.prev.next = tail;
            listsize--;
            return key;
        }
        
        public void addNode(DLLNode temp){
            temp.prev = head;
            temp.next = head.next;
            head.next = temp;
            temp.next.prev = temp;
            listsize++;
        }
        
        public void remove(DLLNode temp){
            temp.prev.next = temp.next;
            temp.next.prev = temp.prev;
            listsize--;
        }
                
    }
    
    class DLLNode {
        int key;
        int value;
        int freq;
        DLLNode next;
        DLLNode prev;
        
        public DLLNode(int k,int v,int f){
            key = k;
            value = v;
            freq = f;
        }
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
