/**
* author: Darshika
* Question Link: https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1#
* Time Complexity: O(4^(m*n))
* Space Complexity: O(m*n)
*/

// { Driver Code Starts
// Initial Template for Java

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a, n);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> res = new ArrayList<>();
        helper(m,0,0,n,"",new boolean[n][n],res);
        return res;
    }
    
    public static void helper(int[][] m,int row,int col,int n,String asf,boolean[][] visited,ArrayList<String> res){
        if(row < 0 || row >= n || col < 0 || col >= n || m[row][col] == 0 || visited[row][col]){
            return;
        }
        
        if(row == n-1 && col == n-1){
            res.add(asf);
            return;
        }
        
        visited[row][col] = true;
        
        helper(m,row+1,col,n,asf+"D",visited,res);
        helper(m,row,col-1,n,asf+"L",visited,res);
        helper(m,row,col+1,n,asf+"R",visited,res);
        helper(m,row-1,col,n,asf+"U",visited,res);
        visited[row][col] = false;
    }
