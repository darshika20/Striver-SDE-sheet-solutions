/**
* author: Darshika
* question link: https://leetcode.com/problems/median-of-two-sorted-arrays/
* time complexity : O(log(m+n))
* space complexity : O(1)
*/

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        return helper(nums1,nums2,nums1.length,nums2.length);
        
    }
    
    private double helper(int[] nums1,int[] nums2,int m,int n){
        if(m>n){
            return helper(nums2,nums1,n,m);
        }
        int hi = nums1.length;
        int lo = 0;
        int maxCut = (nums1.length+nums2.length+1)/2;
        
        while(lo<=hi){
            int cut1 = (lo+hi) >> 1; //0
            int cut2 = maxCut - cut1; //1
            
            int left1 = cut1==0 || nums1.length==0 ? Integer.MIN_VALUE : nums1[cut1-1];
            int left2 = cut2==0 || nums2.length==0 ? Integer.MIN_VALUE : nums2[cut2-1];
            int right1 = cut1 >= nums1.length ? Integer.MAX_VALUE : nums1[cut1];
            int right2 = cut2 >= nums2.length ? Integer.MAX_VALUE : nums2[cut2];
            
            if(left1 <= right2 && left2 <= right1){
                if((nums1.length + nums2.length) % 2 == 0){
                    return (Math.max(left1,left2)+Math.min(right1,right2)) / 2.0;
                }else{
                    return Math.max(left1,left2);
                }                
            }else if(left1 > right2){
                hi = cut1 - 1;
            }else if(left2 > right1){
                lo = cut1 + 1;
            }
        }
        return 0.0;
    }
}
