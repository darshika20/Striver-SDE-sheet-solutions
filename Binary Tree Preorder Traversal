/**
* Author: Darshika
* Question Link: https://leetcode.com/problems/binary-tree-preorder-traversal/
* Time Complexity: O(n) n- no of nodes
* Space Complexity: O(n)
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        if(root == null) {
            return new ArrayList<>();
        }
        List<Integer> preorder = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while(st.size() > 0) {
            TreeNode top = st.pop();
            preorder.add(top.val);
            if(top.right != null) {
                st.push(top.right);
            }
            if(top.left != null) {
                st.push(top.left);
            }
        }
        return preorder;
    }
}
