/**
* author: Darshika
* Question Link: https://leetcode.com/problems/sudoku-solver/
* Time Complexity: O(n^4)
* Space Complexity: O(1)
*/

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    
    private boolean solve(char[][] board){
        for(int i = 0;i<board.length;i++){
            for(int j = 0;j<board.length;j++){
                if(board[i][j] == '.'){
                    for(char ch = '1';ch <= '9';ch++){
                        if(isValid(ch,i,j,board)){
                            board[i][j] = ch;
                            if(solve(board)){
                                return true;
                            }else{
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }                
            }
        }
        return true;
    }
    
    private boolean isValid(char ch,int row,int col,char[][] board){

        for(int i = 0;i<9;i++){
            if(board[row][i] == ch){
                return false;
            }
            if(board[i][col] == ch){
                return false;
            }
            int r = (3*(row/3)) + i/3;
            int c = (3*(col/3)) + i%3;
            if(board[r][c] == ch){
                return false;
            }
        }
        return true;
    }
}
