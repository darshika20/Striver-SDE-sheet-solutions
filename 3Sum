/*
@author: Darshika
@Question Link: https://leetcode.com/problems/3sum/
@Time Complexity: O(n^2)
@Space Complexity: O(1)
*/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        //sort the array
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        //create the triplets
        for(int i =0;i<nums.length;i++){
            int sum = nums[i];
            int lo = i+1, hi = nums.length-1;
            while(lo<hi){
                sum = nums[i]+nums[lo]+nums[hi];
                if(sum==0){
                    List<Integer> temp = new ArrayList<>();
                    temp.add(nums[i]);
                    temp.add(nums[lo]);
                    temp.add(nums[hi]);
                    res.add(temp);
                    while(lo<hi && nums[lo] == nums[lo+1]){
                        lo++;
                    }
                    while(lo<hi && nums[hi] == nums[hi-1]){
                        hi--;
                    }
                    lo++;
                    hi--;
                }else if(sum< 0){
                    while(lo<hi && nums[lo] == nums[lo+1]){
                        lo++;
                    }
                    lo++;
                }else{
                    while(lo<hi && nums[hi] == nums[hi-1]){
                        hi--;
                    }
                    hi--;
                }
            }
            while(i+1<nums.length && nums[i] == nums[i+1]){
                i++;
            }
        }
        return res;
    }
}
