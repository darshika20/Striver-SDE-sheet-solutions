/**
* author: Darshika
* Question Link: https://practice.geeksforgeeks.org/problems/maximum-of-minimum-for-every-window-size3453/1#
* Time Complexity: O(n)
* Space Complexity: O(n)
*/

class Solution 
{
    //Function to find maximum of minimums of every window size.
    static int[] maxOfMin(int[] arr, int n) 
    {
        // Your code here
        Stack<Integer> st = new Stack<>();
        int[] leftsmall = new int[n];
        int[] rightsmall = new int[n];
        
        for(int i = 0;i<n;i++){
            
            while(st.size() > 0 && arr[st.peek()] > arr[i]){
                int val = st.pop();
                rightsmall[val] = i;
                leftsmall[val] = -1;
                if(st.size() > 0){
                    leftsmall[val] = st.peek();
                }
            }
            st.push(i);
        }
        
        while(st.size() > 0){
            int val = st.pop();
            rightsmall[val] = n;
            leftsmall[val] = -1;
            if(st.size() > 0){
                leftsmall[val] = st.peek();
            }
        }
        
        // for(int i = 0;i<n;i++){
        //     System.out.println("val: "+arr[i]+" left boundary : "+leftsmall[i]
        //     +" right boundary: "+rightsmall[i]);
        // }
        
        int[] res = new int[n];
        
        for(int i = 0;i<n;i++){
            int range = rightsmall[i] - leftsmall[i] - 2;
            res[range] = Math.max(arr[i],res[range]);
        }
        
        for(int i = n-2;i>=0;i--){
            res[i] = Math.max(res[i],res[i+1]);
        }
        return res;
    }
}
