/*
@author: Darshika
@Question Link: https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1#
@Time Complexity: O(nLogn)
@Space Complexity: O(n)
*/

class Solution 
{
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    public static int maxMeetings(int start[], int end[], int n)
    {
        // add your code here
        int[][] temp = new int[n][2];
        
        for(int i = 0;i<n;i++){
            temp[i][0] = start[i];
            temp[i][1] = end[i];
        }
        
        Arrays.sort(temp,(a,b)->a[1]==b[1]?a[0]-b[0]:a[1]-b[1]);
        int res = 1;
        int tempres = 1;
        int i = 0;
        int j = 1;
        while(j<n){
            if(temp[j][0] > temp[i][1]){
                i = j;
                tempres++;
            }
            j++;
            res = Math.max(tempres,res);
            
        }
        return res;
    }
}
