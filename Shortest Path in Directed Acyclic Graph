class Solution {
    class Pair{
        int node;
        int weight;
        public Pair(int node, int weight){
            this.node = node;
            this.weight = weight;
        }
    }
    public int longestValidParentheses(String s) {
        List<List<Pair>> adj = new ArrayList<>();
        int n = 6;
        for(int i = 0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        int[] indegrees = new int[n];
        adj.get(0).add(new Pair(1,2));
        indegrees[1]++;
        adj.get(0).add(new Pair(4,1));
        indegrees[4]++;
        adj.get(1).add(new Pair(2,3));
        indegrees[2]++;
        adj.get(2).add(new Pair(3,6));
        indegrees[3]++;
        adj.get(4).add(new Pair(2,2));
        indegrees[2]++;
        adj.get(4).add(new Pair(5,4));
        indegrees[5]++;
        adj.get(5).add(new Pair(3,1));
        indegrees[3]++;
        
        Queue<Integer> q = new LinkedList<>();
        for(int i =0;i<n;i++){
            if(indegrees[i] == 0){
                q.offer(i);
            }
        }
        // boolean[] visited = new boolean[n];
        // for(int i =0;i<n;i++){
        //     if(!visited[i]){
        //         topoSort(i, adj, visited, st);
        //     }
        // }
        List<Integer> topoSort = new ArrayList<>();
        while(!q.isEmpty()){
            int node = q.poll();
            topoSort.add(node);
            for(Pair p : adj.get(node)){
                indegrees[p.node]--;
                if(indegrees[p.node] == 0){
                    q.offer(p.node);
                }
            }
        }
        int[] distance = new int[n];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[topoSort.get(0)] = 0;
        for(int i =0;i<topoSort.size();i++){
            int topNode = topoSort.get(i);
            if(distance[topNode] != Integer.MAX_VALUE){
                for(Pair p : adj.get(topNode)){
                    if(p.weight + distance[topNode] < distance[p.node]){
                        distance[p.node] = p.weight + distance[topNode];
                    }
                }
            }
        }
        for(int i = 0;i<distance.length;i++){
            System.out.println("node : " + i +" distance : " + distance[i]);
        }
        return 0;
    }
    private void topoSort(int src, List<List<Pair>> adj, boolean[] visited, Stack<Integer> st){
        visited[src] = true;
        for(Pair p : adj.get(src)){
            if(!visited[p.node]){
                topoSort(p.node, adj, visited, st);
            }
        }
        st.push(src);
    }
}
