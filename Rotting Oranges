/**
* author: Darshika
* Question Link: https://leetcode.com/problems/rotting-oranges/
* Time Complexity: O(n*m*4)
* Space Complexity: O(n*m)
*/

class Solution {
    public int orangesRotting(int[][] grid) {
        
        int fresh = 0;
        Queue<int[]> q = new ArrayDeque<>(); 
        
        for(int i = 0;i<grid.length;i++){
            for(int j = 0;j<grid[0].length;j++){
                if(grid[i][j] == 1){
                    fresh++;
                }else if(grid[i][j] == 2){
                    int[] idx = new int[2];
                    idx[0] = i;
                    idx[1] = j;
                    //System.out.println("row"+i+"col"+j);
                    q.add(idx);
                }
            }
        }
        
        if(fresh == 0){
            return 0;
        }
        //System.out.println(fresh);
        int count = 0;
        int time = 0;
        int[][] dir = {{-1,0},{0,1},{1,0},{0,-1}};
        while(q.size()>0){
            int size = q.size();
            time++;
            while(size-->0){
                int[] idx = q.remove();
                for(int i = 0;i<4;i++){
                    int row = dir[i][0]+idx[0];
                    if(row >= 0 && row < grid.length){
                        int col = dir[i][1]+idx[1];
                        if(col >= 0 && col < grid[0].length){
                            if(grid[row][col] == 1){
                                grid[row][col] = 2;
                                count++;
                                if(count == fresh){
                                    return time;
                                }
                                int[] temp = new int[2];
                                temp[0] = row;
                                temp[1] = col;
                                q.add(temp);
                            }
                        }
                    }                
                }
            }
            
        }
        return count == fresh?time:-1;
    }
}
