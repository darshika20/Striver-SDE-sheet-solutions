/**
* author: Darshika
* Question Link: https://leetcode.com/problems/sliding-window-maximum/
* Time Complexity: O(n)
* Space Complexity: O(k)
*/

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {//[1,3,1,2,0,5] , 3
        
        int n = nums.length;//6
        int[] maxele = new int[n-k+1];//[3,0,0,0]
        int ri = 0;//0
        Deque<Integer> q = new ArrayDeque<>();//[1,2]
        
        for(int i = 0;i<n;i++){//3
            
            if(q.size() > 0 && q.peek() <= i-k){
                q.poll();
            }            
            while(q.size() > 0 && nums[q.peekLast()] < nums[i]){
                q.pollLast();
            }
            q.offer(i);
            
            if(i >= k-1){
                
                maxele[ri++] = nums[q.peek()];
            }
        }
        return maxele;
    }
}
