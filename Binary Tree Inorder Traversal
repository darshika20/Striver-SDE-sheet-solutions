/**
* author: Darshika Jha
* question link: https://leetcode.com/problems/binary-tree-inorder-traversal/
* time complexity: O(n) n - no of nodes
* Space Complexity: O(n) 
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null) {
            return new ArrayList<>();
        }
        Stack<TreeNode> st = new Stack<>();
        List<Integer> res = new ArrayList<>();
        while(true) {            
            while(root != null) {
                st.push(root);
                root = root.left;
            }
            if(st.size() == 0) {
                break;
            }
            TreeNode top = st.pop();
            res.add(top.val);
            root = top.right;
        } 
        return res;
    }
}
