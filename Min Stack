/**
* author: Darshika
* Question Link: https://leetcode.com/problems/min-stack/
* Time Complexity: O(1)
* Space Complexity: O(1)
*/

class MinStack {
    
    Long min;
    Stack<Long> st;

    public MinStack() {
        
        st = new Stack<>();
        min = Long.MAX_VALUE;
    }
    
    public void push(int val) {
        
        Long v = Long.valueOf(val);
        
        if(st.isEmpty()){ 
            
            st.push(v);
            min = v;
            
        }else{
            
            if(v < min){  
                
                Long temp = 2*v - min;
                st.push(temp);
                min = v;
                
            }else{
                st.push(v);
            }
        }        
    }
    
    public void pop() {
        
        if(st.peek() < min){
            min = 2*min - st.pop();
        }else{
            st.pop();
        }
        
    }
    
    public int top() {
        
        if(st.peek() < min){
            return min.intValue();
        }else{
            return st.peek().intValue();
        }
    }
    
    public int getMin() {
        return min.intValue();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
