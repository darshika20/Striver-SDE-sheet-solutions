/*
@author: Darshika
@Question Link: https://leetcode.com/problems/4sum/
@Time Complexity: O(n3)
@Space Complexity: O(1)
*/
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        //res.add(new ArrayList<>());
        Set<List<Integer>> set = new HashSet<>();
        Arrays.sort(nums);
        for(int i = 0;i<nums.length-3;i++){
            int sum = nums[i];
            for(int j = i+1;j<nums.length-2;j++){
                sum = nums[i]+nums[j];
                int lo = j+1;
                int hi = nums.length-1;                
                while(lo<hi && lo<nums.length && hi >=0){
                    if(sum+nums[lo]+nums[hi] == target){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[lo]);
                        temp.add(nums[hi]);
                        res.add(temp);
                        while(lo<nums.length-1 && nums[lo] == nums[lo+1]){
                            lo++;
                        }
                        lo++;
                        while(hi>0 && nums[hi] == nums[hi-1]){
                            hi--;
                        }
                        hi--;
                    }else if(sum+nums[lo]+nums[hi] < target){
                        while(lo<nums.length-1 && nums[lo] == nums[lo+1]){
                            lo++;
                        }
                        lo++;
                    }else{
                        while(hi>0 && nums[hi] == nums[hi-1]){
                            hi--;
                        }
                        hi--;
                    }
                }
                while(j<nums.length-1 && nums[j+1] == nums[j]){
                    ++j;
                }
            }
            while(i<nums.length-1 && nums[i+1] == nums[i]){
                ++i;
            }
        }
        return res;
    }
}

/*
[-3,-2,-1,0,0,1,2,3]
0
*/
