/*
@author: Darshika
@Question Link: https://leetcode.com/problems/reverse-pairs/
@Time Complexity: O(nLogn) (for mergesort) + O(n) (for merging the sorted array) + O(n) (for finding the reverse pairs)
@Space Complexity: O(n)
*/

class Solution {
    public int reversePairs(int[] nums) {
        return findReversePairs(nums,0,nums.length-1);
    }
    
    private int findReversePairs(int[] nums,int lo,int hi){
        if(lo>=hi){
            return 0;
        }
        int mid = (lo+hi)/2;
        int left = findReversePairs(nums,lo,mid);
        int right = findReversePairs(nums,mid+1,hi);
        int cnt = sort(nums,lo,mid,hi);
        return left+right+cnt;
    }
    
    private int sort(int[] nums,int lo,int mid,int hi){
        int cnt = 0;
        int i = lo;
        int j = mid+1;
        while(i<=mid){
            while(j<=hi && nums[i] > 2*(long)nums[j] ){
                j++;
            }
            cnt += j-(mid+1);
            // System.out.println("For the value at index "+i+" , starting from index "+(mid+1)+" and ending at "+hi+" ,there are "+cnt+" pairs");
            i++;
        }
        
        //sorting
        i = lo;
        j = mid+1;
        List<Integer> temp = new ArrayList<>();
        while(i<=mid && j<=hi){
            if(nums[i] < nums[j]){
                temp.add(nums[i++]);
            }else{
                temp.add(nums[j++]);
            }
        }
        while(i<=mid){
            temp.add(nums[i++]);
        }
        while(j<=hi){
            temp.add(nums[j++]);
        }
        for(i = lo;i<=hi;i++){
            nums[i] = temp.get(i-lo);
        }
        return cnt;
    }
}
