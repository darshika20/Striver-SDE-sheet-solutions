/**
* author: Darshika
* Question Link: https://leetcode.com/problems/permutations/
* Approach1:
* Time Complexity: O(n!*n)
* Space Complexity: O(n!*n) + O(n)
* Approach2:
* Time Complexity: O(n!*n)
* Space Complexity: O(n!*n)
*/


//*****************Approach 1*************************************************************************
// class Solution {
//     public List<List<Integer>> permute(int[] nums) {
//         List<List<Integer>> res = new ArrayList<>();
//         helper(nums,new boolean[nums.length],new ArrayList<>(),res,0);
//         return res;
//     }
    
//     private void helper(int[] nums,boolean[] visited,List<Integer> ds,List<List<Integer>> res,int idx){
//         if(idx == nums.length){
//             res.add(new ArrayList<>(ds));
//             return;
//         }
//         for(int i = 0;i<nums.length;i++){
//             if(!visited[i]){
//                 ds.add(nums[i]);
//                 visited[i] = true;
//                 helper(nums,visited,ds,res,idx+1);
//                 ds.remove(ds.size()-1);
//                 visited[i] = false;
//             }
//         }
        
//     }
// }

//**********************************Approach 2*********************************************************

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        helper(nums,res,0);
        return res;
    }
    
    private void helper(int[] nums,List<List<Integer>> res,int idx){
        if(idx == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int val : nums){
                ds.add(val);
            }
            res.add(new ArrayList<>(ds));
            return;
        }
        for(int i = idx;i<nums.length;i++){
            swap(nums,idx,i);
            helper(nums,res,idx+1);
            swap(nums,idx,i);
        }
        
    }
    
    private void swap(int[] nums,int i,int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
