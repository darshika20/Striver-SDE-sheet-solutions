/**
* author: Darshika
* Question Link: https://leetcode.com/problems/combination-sum-ii/
* Time Complexity: O(2^n * k) - n is no of elements and k is avg length of each combination list
* Space Complexity: O(k*x) - x is the no of combinations
*/

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);//[1,1,2,5,6,7,10]
        List<List<Integer>> res = new ArrayList<>();//[[]]
        helper(candidates,0,new ArrayList<>(),target,res);
        return res;
    }
    
    private void helper(int[] candidates,int idx,List<Integer> comb,int target,List<List<Integer>> res){
            if(target == 0){
                res.add(new ArrayList<>(comb));
                return;
            }
        
        for(int i = idx;i<candidates.length;i++){ 
            if(i == idx || candidates[i]!=candidates[i-1]){
                if(candidates[i] <= target){
                    comb.add(candidates[i]);//[1,1]
                    helper(candidates,i+1,comb,target-candidates[i],res);
                    comb.remove(comb.size()-1);
                }else{
                    break;
                }
            }
        }
    }
}
